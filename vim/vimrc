let mapleader = ","
" --------------------------------------------------------------------------------
" General settings for plugins and such
" --------------------------------------------------------------------------------
set nocompatible
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
runtime! config/**/*.vim
runtime snippets.vim
" --------------------------------------------------------------------------------
" General behavior
" --------------------------------------------------------------------------------
syntax on               " syntax highlighting
set expandtab           " enter spaces when tab is pressed
set tabstop=4           " use 4 spaces to represent tab
set softtabstop=4
set shiftwidth=4        " number of spaces to use for auto indent
set autoindent          " copy indent from current line when starting a new line
set backspace=indent,eol,start " make backspaces more powerful
set number relativenumber
set numberwidth=6
set noshowmode
set laststatus=2
set wrap
set textwidth=0 wrapmargin=0
set display+=lastline
set scrolloff=5
set autochdir
"set cursorline
"set ruler                           " show line and column number
"set showcmd             " show (partial) command in status line
" --------------------------------------------------------------------------------
" Configure expanding of tabs for various file types
" --------------------------------------------------------------------------------
au BufRead,BufNewFile *.py set expandtab
au BufRead,BufNewFile *.c set noexpandtab
au BufRead,BufNewFile *.h set noexpandtab
au BufRead,BufNewFile Makefile* set noexpandtab
" --------------------------------------------------------------------------------
" Search settings
" --------------------------------------------------------------------------------
set incsearch           " search as characters are entered
set ignorecase
" --------------------------------------------------------------------------------
" For finding files more easily
" --------------------------------------------------------------------------------
set path+=**
set wildmenu
set wildignore+=*.o,*.aux,*.fls,*.out,*.blg,.git,*.pyc " Ignore these files when completing
" --------------------------------------------------------------------------------
" Color scheme
" --------------------------------------------------------------------------------
colorscheme wal
"colorscheme abstract
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#close_symbol = 'Ã—'
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
" --------------------------------------------------------------------------------
" Shortcuts
" --------------------------------------------------------------------------------
map <leader>h :History!<CR>
map <leader>o :Files ~/<CR>
autocmd FileType python nmap <C-b> :w! !python<cr>
autocmd FileType tex,latex nmap <C-b> :w! \| !latexmk -pdf %<cr><cr>
map <leader>p :!opout <c-r>%<CR><CR>
command! MakeTags !ctags -R .
" --------------------------------------------------------------------------------
" Navigation
" --------------------------------------------------------------------------------
nnoremap k gk
nnoremap j gj
nnoremap 0 g0
nnoremap $ g$
nnoremap ^ g^
inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>0
map <C-j> :tabp<CR>
map <C-k> :tabn<CR>
" --------------------------------------------------------------------------------
" Jump to last known position
" --------------------------------------------------------------------------------
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
  autocmd BufRead,BufNewFile aliases.local,zshrc.local,*/zsh/configs/* set filetype=sh
  autocmd BufRead,BufNewFile gitconfig.local set filetype=gitconfig
  autocmd BufRead,BufNewFile tmux.conf.local set filetype=tmux
  autocmd BufRead,BufNewFile vimrc.local set filetype=vim
augroup END

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<Tab>"
    else
        return "\<C-p>"
    endif
endfunction
inoremap <Tab> <C-r>=InsertTabWrapper()<CR>
inoremap <S-Tab> <C-n>

" --------------------------------------------------------------------------------
"  Spell checking stuff
" --------------------------------------------------------------------------------
map <F6> :setlocal spell! spelllang=en_us<CR>
" --------------------------------------------------------------------------------
"  Autoreload stuff
" --------------------------------------------------------------------------------
map <leader>vi :tabe $MYVIMRC<cr>
autocmd bufwritepost .vimrc source $MYVIMRC
" --------------------------------------------------------------------------------
"  Copy and paste from clipboard
" --------------------------------------------------------------------------------
vnoremap <C-c> "*y :let @+=@*<CR>
map <C-z> "+P
map <C-x> "+p
" --------------------------------------------------------------------------------
" Vim Wiki configuration 
" --------------------------------------------------------------------------------
let g:vimwiki_list = [{'path': '~/.notes/', 'syntax': 'markdown', 'ext': '.md'},
            \ {'path': '~/.notes/opc/', 'syntax': 'markdown', 'ext': '.md'}]

nnoremap <leader>l :VimwikiToggleListItem<CR>
" --------------------------------------------------------------------------------
" Vim Calendar
" --------------------------------------------------------------------------------
let g:calendar_google_calendar = 1
nnoremap <leader>c :Calendar -first_day=monday<CR>
autocmd FileType calendar nmap <buffer> h <Plug>(calendar_prev)
autocmd FileType calendar nmap <buffer> l <Plug>(calendar_next)
" --------------------------------------------------------------------------------
" Some mail stuff that are being ignored otheriwse
" --------------------------------------------------------------------------------
autocmd FileType mail set fo-=t
autocmd FileType mail set tw=0

